<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.carelink.dao.MemberMapper">

    <resultMap id="memberResultMap" type="com.example.carelink.dto.MemberDTO">
        <id property="memberId" column="member_id"/>
        <result property="userId" column="user_id"/>
        <result property="password" column="password"/>
        <result property="name" column="name"/>
        <result property="email" column="email"/>
        <result property="phone" column="phone"/>
        <result property="role" column="role"/>
        <result property="address" column="address"/>
        <result property="detailAddress" column="detail_address"/>
        <result property="profileImage" column="profile_image"/>
        <result property="isActive" column="is_active"/>
        <result property="loginFailCount" column="login_fail_count"/>
        <result property="lastLoginAt" column="last_login_at"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="isDeleted" column="is_deleted"/>
    </resultMap>

    <select id="findByUserId" resultMap="memberResultMap">
        SELECT *
        FROM member
        WHERE user_id = #{userId}
          AND is_deleted = false
    </select>

    <select id="findById" resultMap="memberResultMap">
        SELECT *
        FROM member
        WHERE member_id = #{memberId}
          AND is_deleted = false
    </select>

    <select id="findByEmail" resultMap="memberResultMap">
        SELECT *
        FROM member
        WHERE email = #{email}
          AND is_deleted = false
    </select>

    <insert id="insertMember" parameterType="com.example.carelink.dto.MemberDTO" useGeneratedKeys="true" keyProperty="memberId">
        INSERT INTO member (
        member_id,          <!-- 1 (자동 증가) -->
        user_id,            <!-- 2 -->
        password,           <!-- 3 -->
        name,               <!-- 4 -->
        email,              <!-- 5 -->
        phone,              <!-- 6 -->
        role,               <!-- 7 -->
        address,            <!-- 8 -->
        detail_address,     <!-- 9 -->
        profile_image,      <!-- 10 -->
        is_active,          <!-- 11 -->
        login_fail_count,   <!-- 12 -->
        last_login_at,      <!-- 13 -->
        is_deleted          <!-- 14 -->
        <!-- created_at, updated_at은 DB DEFAULT이므로 제외 -->
        ) VALUES (
        #{memberId},              <!-- DTO에 null 또는 0으로 설정 -->
        #{userId, jdbcType=VARCHAR},
        #{password, jdbcType=VARCHAR},
        #{name, jdbcType=VARCHAR},
        #{email, jdbcType=VARCHAR},
        #{phone, jdbcType=VARCHAR},
        #{role, jdbcType=VARCHAR},
        #{address, jdbcType=VARCHAR},
        #{detailAddress, jdbcType=VARCHAR},
        #{profileImage, jdbcType=VARCHAR},
        #{isActive, jdbcType=BOOLEAN},
        #{loginFailCount, jdbcType=INTEGER},
        #{lastLoginAt, jdbcType=TIMESTAMP},
        #{isDeleted, jdbcType=BOOLEAN}
        )
    </insert>

    <select id="existsByUserId" resultType="boolean">
        SELECT COUNT(*) > 0 FROM member WHERE user_id = #{userId}
    </select>

    <select id="existsByEmail" resultType="boolean">
        SELECT COUNT(*) > 0 FROM member WHERE email = #{email}
    </select>

    <update id="updateMember" parameterType="MemberDTO">
        UPDATE member
        SET
            name = #{name},
            email = #{email},
            phone = #{phone},
            address = #{address},
            detail_address = #{detailAddress},
            profile_image = #{profileImage},
            updated_at = NOW()
        WHERE member_id = #{memberId}
    </update>

    <update id="softDeleteMember">
        UPDATE member
        SET
            is_deleted = TRUE,
            is_active = FALSE,
            updated_at = NOW()
        WHERE user_id = #{userId}
    </update>
    
    <!-- 익명화: 개인정보만 삭제, 콘텐츠는 유지 -->
    <update id="anonymizeMember">
        UPDATE member
        SET
            name = '탈퇴회원',
            email = NULL,
            phone = NULL,
            address = NULL,
            profile_image = NULL,
            password = 'DELETED',
            is_deleted = TRUE,
            is_active = FALSE,
            updated_at = NOW()
        WHERE user_id = #{userId}
    </update>
    
    <!-- 물리 삭제: 완전히 데이터 제거 -->
    <delete id="hardDeleteMember">
        DELETE FROM member WHERE user_id = #{userId}
    </delete>

    <update id="updatePassword" parameterType="MemberDTO">
        UPDATE member
        SET
            password = #{password},
            updated_at = NOW()
        WHERE member_id = #{memberId}
    </update>

    <update id="updateLoginSuccess">
        UPDATE member
        SET login_fail_count = 0,
            last_login_at = NOW(),
            updated_at = NOW()
        WHERE member_id = #{memberId}
    </update>

    <update id="updateLoginFail">
        UPDATE member
        SET login_fail_count = login_fail_count + 1,
            updated_at = NOW()
        WHERE member_id = #{memberId}
    </update>

    <!-- 전체 회원 수 조회 (관리자용) -->
    <select id="getTotalCount" resultType="int">
        SELECT COUNT(*)
        FROM member
        WHERE is_deleted = FALSE
    </select>

    <select id="findMembersWithPaging" resultMap="memberResultMap">
        SELECT *
        FROM member
        WHERE is_deleted = FALSE
        <if test="role != null and !role.isEmpty()">
            AND role = #{role}
        </if>
        ORDER BY created_at DESC
        LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <select id="findMembersByRole" resultMap="memberResultMap">
        SELECT *
        FROM member
        WHERE is_deleted = FALSE
        <if test="role != null and role != ''">
            AND role = #{role}
        </if>
        ORDER BY created_at DESC
    </select>

    <update id="updateMemberStatus">
        UPDATE member
        SET is_active = #{isActive},
            updated_at = NOW()
        WHERE member_id = #{memberId}
    </update>

    <!-- 전체 회원 수 조회 (통계용) -->
    <select id="getMemberCount" resultType="int">
        SELECT COUNT(*) 
        FROM member 
        WHERE is_deleted = false AND is_active = true
    </select>

    <!-- ================== 관리자용 쿼리들 ================== -->

    <!-- 시설 회원 수 조회 (관리자용) -->
    <select id="getFacilityMemberCount" resultType="int">
        SELECT COUNT(*) 
        FROM member 
        WHERE is_deleted = false 
        AND role = 'FACILITY'
    </select>

    <!-- 일반 회원 수 조회 (관리자용) -->
    <select id="getUserMemberCount" resultType="int">
        SELECT COUNT(*) 
        FROM member 
        WHERE is_deleted = false 
        AND role = 'USER'
    </select>

    <!-- 역할별 회원 수 조회 (관리자용) -->
    <select id="getMemberCountByRole" resultType="int">
        SELECT COUNT(*) 
        FROM member 
        WHERE is_deleted = false
        <if test="role != null and role != ''">
            AND role = #{role}
        </if>
    </select>

</mapper>
