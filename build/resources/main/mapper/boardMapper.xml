<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.carelink.dao.BoardMapper">

    <!-- ResultMap 정의 -->
    <resultMap id="boardResultMap" type="com.example.carelink.dto.BoardDTO">
        <id property="boardId" column="board_id"/>
        <result property="boardType" column="board_type"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="memberId" column="member_id"/>
        <result property="memberName" column="member_name"/>
        <result property="viewCount" column="view_count"/>
        <result property="likeCount" column="like_count"/>
        <result property="commentCount" column="comment_count"/>
        <result property="attachmentPath" column="attachment_path"/>
        <result property="attachmentName" column="attachment_name"/>
        <result property="attachmentSize" column="attachment_size"/>
        <result property="isNotice" column="is_notice"/>
        <result property="isSecret" column="is_secret"/>
        <result property="isDeleted" column="is_deleted"/>
        <result property="status" column="status"/>
        <result property="category" column="category"/>
        <result property="subCategory" column="sub_category"/>
        <result property="priority" column="priority"/>
        <result property="isPinned" column="is_pinned"/>
        <result property="parentBoardId" column="parent_board_id"/>
        <result property="replyDepth" column="reply_depth"/>
        <result property="replyOrder" column="reply_order"/>
        <result property="tags" column="tags"/>
        <result property="metaDescription" column="meta_description"/>
        <result property="metaKeywords" column="meta_keywords"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <!-- 게시글 목록 조회 -->
    <select id="getBoardList" parameterType="com.example.carelink.dto.BoardDTO" resultType="com.example.carelink.dto.BoardDTO">
        SELECT
            b.board_id,
            b.board_type,
            b.title,
            b.content,
            b.member_id,
            m.name as member_name,
            b.view_count,
            b.like_count,
            b.comment_count,
            b.is_notice,
            b.is_secret,
            COALESCE(b.is_active, true) as is_active,
            COALESCE(b.is_deleted, false) as is_deleted,
            b.status,
            b.category,
            b.sub_category,
            b.priority,
            b.is_pinned,
            b.tags,
            b.created_at,
            b.updated_at
        FROM
            board b
            LEFT JOIN member m ON b.member_id = m.member_id
        WHERE
            COALESCE(b.is_active, true) = true
            AND COALESCE(b.is_deleted, false) = false
            <if test="searchKeyword != null and searchKeyword != ''">
                AND (b.title LIKE CONCAT('%', #{searchKeyword}, '%') OR b.content LIKE CONCAT('%', #{searchKeyword}, '%'))
            </if>
            <if test="category != null and category != ''">
                AND b.category = #{category}
            </if>
        ORDER BY
            b.is_notice DESC,
            b.created_at DESC
        LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 게시글 수 조회 -->
    <select id="getBoardCount" parameterType="com.example.carelink.dto.BoardDTO" resultType="int">
        SELECT COUNT(*)
        FROM
            board b
            LEFT JOIN member m ON b.member_id = m.member_id
        WHERE
            COALESCE(b.is_active, true) = true
            AND COALESCE(b.is_deleted, false) = false
            <if test="searchKeyword != null and searchKeyword != ''">
                AND (b.title LIKE CONCAT('%', #{searchKeyword}, '%') OR b.content LIKE CONCAT('%', #{searchKeyword}, '%'))
            </if>
            <if test="category != null and category != ''">
                AND b.category = #{category}
            </if>
    </select>

    <!-- 게시글 상세 조회 -->
    <select id="getBoardById" parameterType="long" resultType="com.example.carelink.dto.BoardDTO">
        SELECT
            b.board_id,
            b.board_type,
            b.title,
            b.content,
            b.member_id,
            m.name as member_name,
            b.view_count,
            b.like_count,
            b.comment_count,
            b.attachment_path,
            b.attachment_name,
            b.attachment_size,
            b.is_notice,
            b.is_secret,
            COALESCE(b.is_active, true) as is_active,
            COALESCE(b.is_deleted, false) as is_deleted,
            b.status,
            b.category,
            b.sub_category,
            b.priority,
            b.is_pinned,
            b.parent_board_id,
            b.reply_depth,
            b.reply_order,
            b.tags,
            b.meta_description,
            b.meta_keywords,
            b.created_at,
            b.updated_at
        FROM
            board b
            LEFT JOIN member m ON b.member_id = m.member_id
        WHERE
            b.board_id = #{boardId}
            AND COALESCE(b.is_active, true) = true
            AND COALESCE(b.is_deleted, false) = false
    </select>

    <!-- 게시글 상세 조회 (삭제된 것 포함) -->
    <select id="getBoardByIdIncludeDeleted" parameterType="long" resultType="com.example.carelink.dto.BoardDTO">
        SELECT
            b.board_id,
            b.board_type,
            b.title,
            b.content,
            b.member_id,
            m.name as member_name,
            b.view_count,
            b.like_count,
            b.comment_count,
            b.attachment_path,
            b.attachment_name,
            b.attachment_size,
            b.is_notice,
            b.is_secret,
            COALESCE(b.is_active, true) as is_active,
            COALESCE(b.is_deleted, false) as is_deleted,
            b.status,
            b.category,
            b.sub_category,
            b.priority,
            b.is_pinned,
            b.parent_board_id,
            b.reply_depth,
            b.reply_order,
            b.tags,
            b.meta_description,
            b.meta_keywords,
            b.created_at,
            b.updated_at
        FROM
            board b
            LEFT JOIN member m ON b.member_id = m.member_id
        WHERE
            b.board_id = #{boardId}
    </select>

    <!-- 게시글 등록 -->
    <insert id="insertBoard" parameterType="com.example.carelink.dto.BoardDTO" useGeneratedKeys="true" keyProperty="boardId">
        INSERT INTO board (
            board_type,
            title,
            content,
            member_id,
            attachment_path,
            attachment_name,
            attachment_size,
            is_notice,
            is_secret,
            is_active,
            is_deleted,
            category,
            sub_category,
            priority,
            is_pinned,
            parent_board_id,
            reply_depth,
            reply_order,
            tags,
            meta_description,
            meta_keywords,
            created_at,
            updated_at
        ) VALUES (
            #{boardType},
            #{title},
            #{content},
            #{memberId},
            #{attachmentPath},
            #{attachmentName},
            #{attachmentSize},
            #{isNotice},
            #{isSecret},
            #{isActive},
            #{isDeleted},
            #{category},
            #{subCategory},
            COALESCE(#{priority}, 1),
            #{isPinned},
            #{parentBoardId},
            #{replyDepth},
            #{replyOrder},
            #{tags},
            #{metaDescription},
            #{metaKeywords},
            NOW(),
            NOW()
        )
    </insert>

    <!-- 게시글 수정 -->
    <update id="updateBoard" parameterType="com.example.carelink.dto.BoardDTO">
        UPDATE board
        SET
            board_type = #{boardType},
            title = #{title},
            content = #{content},
            attachment_path = #{attachmentPath},
            attachment_name = #{attachmentName},
            attachment_size = #{attachmentSize},
            is_notice = #{isNotice},
            is_secret = #{isSecret},
            category = #{category},
            sub_category = #{subCategory},
            priority = COALESCE(#{priority}, 1),
            is_pinned = #{isPinned},
            tags = #{tags},
            meta_description = #{metaDescription},
            meta_keywords = #{metaKeywords},
            updated_at = NOW()
        WHERE
            board_id = #{boardId}
    </update>

    <!-- 게시글 삭제 (논리적 삭제) -->
    <update id="deleteBoard" parameterType="long">
        UPDATE board
        SET
            is_deleted = true,
            updated_at = NOW()
        WHERE
            board_id = #{boardId}
            AND COALESCE(is_deleted, false) = false
    </update>



    <!-- 조회수 증가 -->
    <update id="incrementViewCount" parameterType="long">
        UPDATE board
        SET
            view_count = view_count + 1,
            updated_at = NOW()
        WHERE
            board_id = #{boardId}
            AND COALESCE(is_active, true) = true
            AND COALESCE(is_deleted, false) = false
    </update>
    
    <!-- 조회수 증가 (별칭) -->
    <update id="increaseViewCount" parameterType="long">
        UPDATE board
        SET
            view_count = view_count + 1,
            updated_at = NOW()
        WHERE
            board_id = #{boardId}
            AND COALESCE(is_active, true) = true
            AND COALESCE(is_deleted, false) = false
    </update>

    <!-- 인기 게시글 목록 조회 -->
    <select id="getPopularBoards" resultType="com.example.carelink.dto.BoardDTO">
        SELECT
            b.board_id,
            b.title,
            b.member_id,
            m.name as member_name,
            b.view_count,
            b.like_count,
            b.comment_count,
            b.category,
            b.is_notice,
            b.is_pinned,
            b.created_at
        FROM
            board b
            LEFT JOIN member m ON b.member_id = m.member_id
        WHERE
            COALESCE(b.is_active, true) = true
            AND COALESCE(b.is_deleted, false) = false
            AND b.created_at >= DATE_SUB(NOW(), INTERVAL 7 DAY)
        ORDER BY
            (b.view_count * 0.4 + b.like_count * 0.4 + b.comment_count * 0.2) DESC
        LIMIT 5
    </select>

    <!-- 카테고리별 게시글 목록 조회 -->
    <select id="getBoardsByCategory" parameterType="string" resultType="com.example.carelink.dto.BoardDTO">
        SELECT
            b.board_id,
            b.title,
            b.member_id,
            m.name as member_name,
            b.view_count,
            b.like_count,
            b.comment_count,
            b.category,
            b.is_notice,
            b.is_pinned,
            b.created_at
        FROM
            board b
            LEFT JOIN member m ON b.member_id = m.member_id
        WHERE
            COALESCE(b.is_active, true) = true
            AND COALESCE(b.is_deleted, false) = false
            AND b.category = #{category}
        ORDER BY
            b.created_at DESC
        LIMIT 10
    </select>

    <!-- 카테고리별 인기 게시글 목록 조회 -->
    <select id="getPopularBoardsByCategory" parameterType="string" resultType="com.example.carelink.dto.BoardDTO">
        SELECT
            b.board_id,
            b.title,
            b.member_id,
            m.name as member_name,
            b.view_count,
            b.like_count,
            b.comment_count,
            b.category,
            b.is_notice,
            b.is_pinned,
            b.created_at
        FROM
            board b
            LEFT JOIN member m ON b.member_id = m.member_id
        WHERE
            COALESCE(b.is_active, true) = true
            AND COALESCE(b.is_deleted, false) = false
            AND b.created_at >= DATE_SUB(NOW(), INTERVAL 7 DAY)
            <if test="category != null and category != ''">
                AND b.category = #{category}
            </if>
        ORDER BY
            (b.view_count * 0.4 + b.like_count * 0.4 + b.comment_count * 0.2) DESC
        LIMIT 5
    </select>
    
    <!-- 이전 게시글 조회 -->
    <select id="getPreviousBoard" parameterType="long" resultType="com.example.carelink.dto.BoardDTO">
        SELECT
            b.board_id,
            b.title
        FROM
            board b
        WHERE
            COALESCE(b.is_active, true) = true
            AND COALESCE(b.is_deleted, false) = false
            AND b.board_id &lt; #{boardId}
        ORDER BY
            b.board_id DESC
        LIMIT 1
    </select>
    
    <!-- 다음 게시글 조회 -->
    <select id="getNextBoard" parameterType="long" resultType="com.example.carelink.dto.BoardDTO">
        SELECT
            b.board_id,
            b.title
        FROM
            board b
        WHERE
            COALESCE(b.is_active, true) = true
            AND COALESCE(b.is_deleted, false) = false
            AND b.board_id &gt; #{boardId}
        ORDER BY
            b.board_id ASC
        LIMIT 1
    </select>
    
    <!-- 게시글 추천수 증가 -->
    <update id="incrementLikeCount" parameterType="long">
        UPDATE board
        SET
            like_count = like_count + 1,
            updated_at = NOW()
        WHERE
            board_id = #{boardId}
            AND COALESCE(is_active, true) = true
            AND COALESCE(is_deleted, false) = false
    </update>
    
    <!-- 게시글 추천수 감소 -->
    <update id="decrementLikeCount" parameterType="long">
        UPDATE board
        SET
            like_count = GREATEST(0, like_count - 1),
            updated_at = NOW()
        WHERE
            board_id = #{boardId}
            AND COALESCE(is_active, true) = true
            AND COALESCE(is_deleted, false) = false
    </update>
    
    <!-- 특정 회원이 작성한 게시글 목록 조회 -->
    <select id="findBoardsByMemberId" resultMap="boardResultMap">
        SELECT b.*, m.name as author_name
        FROM board b
        LEFT JOIN member m ON b.member_id = m.member_id
        WHERE b.member_id = #{memberId}
          AND b.is_deleted = false
        ORDER BY b.created_at DESC
    </select>

    <!-- 회원 ID로 게시글 삭제 (회원 탈퇴 시 사용) -->
    <delete id="deleteByMemberId" parameterType="long">
        DELETE FROM board WHERE member_id = #{memberId}
    </delete>

</mapper> 