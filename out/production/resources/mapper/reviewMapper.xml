<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.carelink.dao.ReviewMapper">

    <!-- ResultMap 정의 -->
    <resultMap id="reviewResultMap" type="com.example.carelink.dto.ReviewDTO">
        <id property="reviewId" column="review_id"/>
        <result property="facilityId" column="facility_id"/>
        <result property="facilityName" column="facility_name"/>
        <result property="memberId" column="member_id"/>
        <result property="memberName" column="member_name"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="rating" column="rating"/>
        <result property="serviceRating" column="service_rating"/>
        <result property="facilityRating" column="facility_rating"/>
        <result property="staffRating" column="staff_rating"/>
        <result property="priceRating" column="price_rating"/>
        <result property="reviewImage1" column="review_image1"/>
        <result property="reviewImage2" column="review_image2"/>
        <result property="reviewImage3" column="review_image3"/>
        <result property="likeCount" column="like_count"/>
        <result property="dislikeCount" column="dislike_count"/>
        <result property="viewCount" column="view_count"/>
        <result property="isVisible" column="is_visible"/>
        <result property="status" column="status"/>
        <result property="parentReviewId" column="parent_review_id"/>
        <result property="replyCount" column="reply_count"/>
        <result property="replyDepth" column="reply_depth"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="isDeleted" column="is_deleted"/>
    </resultMap>

    <!-- 리뷰 목록 조회 (검색 포함) -->
    <select id="findReviewsWithSearch" parameterType="com.example.carelink.dto.ReviewDTO" resultMap="reviewResultMap">
        SELECT 
            r.*,
            m.name as member_name,
            f.facility_name
        FROM review r
        LEFT JOIN member m ON r.member_id = m.member_id
        LEFT JOIN facility f ON r.facility_id = f.facility_id
        WHERE r.is_deleted = false AND r.is_visible = true
        <if test="facilityId != null">
            AND r.facility_id = #{facilityId}
        </if>
        <if test="searchKeyword != null and searchKeyword != ''">
            AND (r.title LIKE CONCAT('%', #{searchKeyword}, '%') 
                 OR r.content LIKE CONCAT('%', #{searchKeyword}, '%'))
        </if>
        <if test="minRating != null">
            AND r.rating >= #{minRating}
        </if>
        <if test="maxRating != null">
            AND r.rating &lt;= #{maxRating}
        </if>
        <choose>
            <when test="sortBy != null and sortBy == 'RATING_HIGH'">
                ORDER BY r.rating DESC, r.created_at DESC
            </when>
            <when test="sortBy != null and sortBy == 'RATING_LOW'">
                ORDER BY r.rating ASC, r.created_at DESC
            </when>
            <when test="sortBy != null and sortBy == 'LIKE_COUNT'">
                ORDER BY r.like_count DESC, r.created_at DESC
            </when>
            <otherwise>
                ORDER BY r.created_at DESC
            </otherwise>
        </choose>
        <if test="size != null and size > 0">
            LIMIT #{size}
        </if>
        <if test="offset != null and offset >= 0">
            OFFSET #{offset}
        </if>
    </select>

    <!-- 리뷰 총 개수 조회 -->
    <select id="countReviewsWithSearch" parameterType="com.example.carelink.dto.ReviewDTO" resultType="int">
        SELECT COUNT(*)
        FROM review r
        WHERE r.is_deleted = false AND r.is_visible = true
        <if test="facilityId != null">
            AND r.facility_id = #{facilityId}
        </if>
        <if test="searchKeyword != null and searchKeyword != ''">
            AND (r.title LIKE CONCAT('%', #{searchKeyword}, '%') 
                 OR r.content LIKE CONCAT('%', #{searchKeyword}, '%'))
        </if>
        <if test="minRating != null">
            AND r.rating >= #{minRating}
        </if>
        <if test="maxRating != null">
            AND r.rating &lt;= #{maxRating}
        </if>
    </select>

    <!-- 리뷰 상세 조회 -->
    <select id="findReviewById" parameterType="long" resultMap="reviewResultMap">
        SELECT 
            r.*,
            m.name as member_name,
            f.facility_name
        FROM review r
        LEFT JOIN member m ON r.member_id = m.member_id
        LEFT JOIN facility f ON r.facility_id = f.facility_id
        WHERE r.review_id = #{reviewId} AND r.is_deleted = false
    </select>

    <!-- 리뷰 등록 -->
    <insert id="insertReview" parameterType="com.example.carelink.dto.ReviewDTO" useGeneratedKeys="true" keyProperty="reviewId">
        INSERT INTO review (
            facility_id, member_id, title, content, rating,
            service_rating, facility_rating, staff_rating, price_rating,
            review_image1, review_image2, review_image3,
            is_visible, status, parent_review_id, reply_depth,
            created_at
        ) VALUES (
            #{facilityId}, #{memberId}, #{title}, #{content}, #{rating},
            #{serviceRating}, #{facilityRating}, #{staffRating}, #{priceRating},
            #{reviewImage1}, #{reviewImage2}, #{reviewImage3},
            #{isVisible}, #{status}, #{parentReviewId}, #{replyDepth},
            NOW()
        )
    </insert>

    <!-- 리뷰 수정 -->
    <update id="updateReview" parameterType="com.example.carelink.dto.ReviewDTO">
        UPDATE review SET
            title = #{title},
            content = #{content},
            rating = #{rating},
            service_rating = #{serviceRating},
            facility_rating = #{facilityRating},
            staff_rating = #{staffRating},
            price_rating = #{priceRating},
            review_image1 = #{reviewImage1},
            review_image2 = #{reviewImage2},
            review_image3 = #{reviewImage3},
            is_visible = #{isVisible},
            status = #{status},
            updated_at = NOW()
        WHERE review_id = #{reviewId}
    </update>

    <!-- 리뷰 삭제 (논리 삭제) -->
    <update id="deleteReview" parameterType="long">
        UPDATE review SET
            is_deleted = true,
            updated_at = NOW()
        WHERE review_id = #{reviewId}
    </update>

    <!-- 조회수 증가 -->
    <update id="incrementViewCount" parameterType="long">
        UPDATE review SET
            view_count = view_count + 1,
            updated_at = NOW()
        WHERE review_id = #{reviewId}
    </update>

    <!-- 추천수 증가 -->
    <update id="incrementLikeCount" parameterType="long">
        UPDATE review SET
            like_count = like_count + 1,
            updated_at = NOW()
        WHERE review_id = #{reviewId}
    </update>

    <!-- 비추천수 증가 -->
    <update id="incrementDislikeCount" parameterType="long">
        UPDATE review SET
            dislike_count = dislike_count + 1,
            updated_at = NOW()
        WHERE review_id = #{reviewId}
    </update>

    <!-- 회원별 리뷰 목록 조회 -->
    <select id="findReviewsByMemberId" parameterType="long" resultMap="reviewResultMap">
        SELECT 
            r.*,
            m.name as member_name,
            f.facility_name
        FROM review r
        LEFT JOIN member m ON r.member_id = m.member_id
        LEFT JOIN facility f ON r.facility_id = f.facility_id
        WHERE r.member_id = #{memberId} AND r.is_deleted = false
        ORDER BY r.created_at DESC
    </select>

    <!-- 시설별 리뷰 목록 조회 -->
    <select id="findReviewsByFacilityId" parameterType="long" resultMap="reviewResultMap">
        SELECT 
            r.*,
            m.name as member_name,
            f.facility_name
        FROM review r
        LEFT JOIN member m ON r.member_id = m.member_id
        LEFT JOIN facility f ON r.facility_id = f.facility_id
        WHERE r.facility_id = #{facilityId} AND r.is_deleted = false AND r.is_visible = true
        ORDER BY r.created_at DESC
    </select>

    <!-- 시설별 평균 평점 조회 -->
    <select id="getAverageRatingByFacilityId" parameterType="long" resultType="float">
        SELECT ROUND(AVG(rating), 1)
        FROM review
        WHERE facility_id = #{facilityId} AND is_deleted = false AND is_visible = true
    </select>

    <!-- 시설별 리뷰 개수 조회 -->
    <select id="getReviewCountByFacilityId" parameterType="long" resultType="int">
        SELECT COUNT(*)
        FROM review
        WHERE facility_id = #{facilityId} AND is_deleted = false AND is_visible = true
    </select>

</mapper> 