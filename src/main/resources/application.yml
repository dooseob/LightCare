# 서버 설정
server:
  port: 8080
  servlet:
    context-path: /
    encoding:
      charset: UTF-8
      enabled: true
      force: true

# 데이터베이스 설정
spring:
  jackson:
    serialization:
      write-dates-as-timestamps: false
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${DB_URL:jdbc:mysql://localhost:3306/carelink?useSSL=false&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8}
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:mysql}
    hikari:
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      maximum-pool-size: 10
      minimum-idle: 5
      pool-name: CareLink-HikariCP
      auto-commit: false
      transaction-isolation: TRANSACTION_READ_COMMITTED

  # 데이터베이스 초기화 설정 (Railway 전용)
  sql:
    init:
      mode: always
      schema-locations: classpath:schema.sql
      data-locations: classpath:data.sql
      continue-on-error: true
      separator: ;
      encoding: UTF-8
      
  # JPA 설정 (테이블 자동 생성을 위한 옵션 - MyBatis와 병행)
  jpa:
    hibernate:
      ddl-auto: none  # MyBatis 사용으로 none 설정
    show-sql: true
    database-platform: org.hibernate.dialect.MySQL8Dialect
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true

  # Thymeleaf 설정
  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
    mode: HTML
    encoding: UTF-8
    cache: false  # 개발 단계에서는 캐시 비활성화
    
  # 파일 업로드 설정
  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 50MB

# MyBatis 설정
mybatis:
  type-aliases-package: com.example.carelink.dto
  mapper-locations: classpath:mapper/*.xml
  configuration:
    map-underscore-to-camel-case: true
    jdbc-type-for-null: varchar
    default-fetch-size: 100
    default-statement-timeout: 30

# 로깅 설정
logging:
  level:
    root: INFO # 기본 루트 로그 레벨 (필요시 DEBUG로 변경)
    com.example.carelink: DEBUG # 본인의 애플리케이션 패키지 로그 레벨을 DEBUG로 높입니다.
    com.example.carelink.dao: DEBUG
    org.springframework.web: DEBUG # 웹 관련 로그를 자세히 봅니다.
    org.springframework.jdbc: DEBUG
    org.mybatis: DEBUG # MyBatis 관련 로그를 자세히 봅니다.
    org.apache.ibatis: DEBUG
    org.springframework.transaction: DEBUG
    java.sql: DEBUG # SQL 쿼리를 직접적으로 봅니다. (MyBatis가 SQL을 콘솔에 출력하도록 설정했다면)
    jdbc.sqltiming: INFO # 실제 쿼리 실행 시간 등을 보려면 INFO (혹은 DEBUG)
    com.zaxxer.hikari: DEBUG # DB 커넥션 풀 관련

# 파일 업로드 경로 설정 (환경별 자동 설정)
file:
  upload-dir:
    facility: ${UPLOAD_DIR:/app/uploads/}facility/
    profile: ${UPLOAD_DIR:/app/uploads/}profile/
    board: ${UPLOAD_DIR:/app/uploads/}board/
    temp: ${UPLOAD_DIR:/app/uploads/}temp/

# SpringDoc OpenAPI 설정
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: method
  show-actuator: true
  default-consumes-media-type: application/json
  default-produces-media-type: application/json
  paths-to-match:
    - /api/**
  packages-to-scan:
    - com.lightcare.controller

# 외부 API 키 설정
api:
  kakao:
    app-key: ${KAKAO_APP_KEY:b97b58672807a40c122a5deed8a98ea4}

---
# Railway 환경 전용 설정
spring:
  config:
    activate:
      on-profile: railway
  
  datasource:
    # Railway는 자동으로 DATABASE_URL을 제공
    url: ${MYSQL_URL:${DATABASE_URL:jdbc:mysql://localhost:3306/carelink?useSSL=false&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8}}
    username: ${MYSQLUSER:${DATABASE_USERNAME:${DB_USERNAME:root}}}
    password: ${MYSQLPASSWORD:${DATABASE_PASSWORD:${DB_PASSWORD:mysql}}}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      connection-timeout: 60000  # Railway 환경에 맞게 조정
      idle-timeout: 300000
      max-lifetime: 1800000
      maximum-pool-size: 5      # Railway 제한에 맞게 감소
      minimum-idle: 2
      leak-detection-threshold: 60000
      
  # Railway 환경에서 스키마 초기화 강화
  sql:
    init:
      mode: always
      schema-locations: classpath:schema.sql
      data-locations: classpath:data.sql
      continue-on-error: false  # Railway에서는 에러 시 명확하게 실패
      separator: ;
      encoding: UTF-8
      
# Railway 환경에서 로깅 레벨 조정
logging:
  level:
    root: INFO
    com.example.carelink: INFO
    org.springframework.jdbc.datasource.init: DEBUG  # 스키마 초기화 로그 상세히
    org.springframework.boot.autoconfigure.sql.init: DEBUG
