# 기본 서버 설정
server:
  port: ${PORT:8080}
  servlet:
    context-path: /
    encoding:
      charset: UTF-8
      enabled: true
      force: true

# 기본 데이터베이스 설정
spring:
  jackson:
    serialization:
      write-dates-as-timestamps: false
      
  # 데이터베이스 설정 (환경별 오버라이드)
  datasource:
    # 기본 로컬 개발용 MySQL 설정
    url: jdbc:mysql://localhost:3306/carelink?useSSL=false&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8
    username: root
    password: mysql
    hikari:
      connection-timeout: 60000
      idle-timeout: 300000
      max-lifetime: 1800000
      maximum-pool-size: ${DB_MAX_POOL_SIZE:5}  # Railway 환경 고려
      minimum-idle: 2
      pool-name: CareLink-HikariCP
      auto-commit: false
      transaction-isolation: TRANSACTION_READ_COMMITTED
      leak-detection-threshold: 60000

  # 데이터베이스 초기화 설정
  sql:
    init:
      mode: ${SQL_INIT_MODE:always}
      schema-locations: classpath:schema.sql
      data-locations: classpath:data.sql
      continue-on-error: true
      separator: ;
      encoding: UTF-8
      
  # JPA 설정 (환경별 데이터베이스 지원)
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: false  # 프로덕션에서는 false
    # 데이터베이스 플랫폼은 프로덕션에서 오버라이드
    properties:
      hibernate:
        format_sql: false
        use_sql_comments: false

  # Thymeleaf 설정
  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
    mode: HTML
    encoding: UTF-8
    cache: ${THYMELEAF_CACHE:true}  # Railway에서는 캐시 활성화
    
  # 파일 업로드 설정
  servlet:
    multipart:
      max-file-size: ${MAX_FILE_SIZE:10MB}
      max-request-size: ${MAX_REQUEST_SIZE:10MB}

# MyBatis 설정
mybatis:
  type-aliases-package: com.example.carelink.dto
  mapper-locations: classpath:mapper/*.xml
  configuration:
    map-underscore-to-camel-case: true
    jdbc-type-for-null: varchar
    default-fetch-size: 100
    default-statement-timeout: 30

# 로깅 설정 (환경별 조정)
logging:
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    com.example.carelink: ${LOG_LEVEL_APP:INFO}
    org.springframework: WARN
    org.mybatis: WARN
    org.springframework.jdbc.datasource.init: INFO
    org.springframework.boot.autoconfigure.sql.init: INFO
  pattern:
    console: "%d{HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# 파일 업로드 경로 설정
file:
  upload-dir:
    facility: ${UPLOAD_BASE_PATH:/tmp/uploads}/facility/
    profile: ${UPLOAD_BASE_PATH:/tmp/uploads}/profile/
    board: ${UPLOAD_BASE_PATH:/tmp/uploads}/board/
    review: ${UPLOAD_BASE_PATH:/tmp/uploads}/review/
    temp: ${UPLOAD_BASE_PATH:/tmp/uploads}/temp/

# 외부 API 키 설정
api:
  kakao:
    app-key: ${KAKAO_APP_KEY}

# SpringDoc OpenAPI 설정
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: method
  show-actuator: true
  default-consumes-media-type: application/json
  default-produces-media-type: application/json
  paths-to-match:
    - /api/**
  packages-to-scan:
    - com.example.carelink.controller  # 패키지명 수정

---
# 로컬 개발 환경 설정
spring:
  config:
    activate:
      on-profile: local
      
  datasource:
    url: jdbc:mysql://localhost:3306/carelink?useSSL=false&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8
    username: root
    password: mysql
    hikari:
      maximum-pool-size: 10
      
  thymeleaf:
    cache: false
    
logging:
  level:
    root: INFO
    com.example.carelink: DEBUG
    org.springframework.web: DEBUG
    org.springframework.jdbc: DEBUG
    org.mybatis: DEBUG

---
# 프로덕션 환경 설정 (Render PostgreSQL)
spring:
  config:
    activate:
      on-profile: production
      
  datasource:
    url: jdbc:postgresql://dpg-crr4d6pu0jms73a5rp80-a.oregon-postgres.render.com:5432/lightcare_db?sslmode=disable
    username: lightcare_user
    password: CqBmAY8J9rGY7xLsFzY7zNOuYg7sE6KY
    hikari:
      maximum-pool-size: 3
      minimum-idle: 1
      connection-timeout: 30000
      idle-timeout: 300000
      max-lifetime: 1200000
      # PostgreSQL 연결 속성
      data-source-properties:
        ssl: false
        sslmode: disable
        prepareThreshold: 0
        preparedStatementCacheQueries: 0
        
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        
  sql:
    init:
      mode: always
      schema-locations: classpath:schema-postgresql.sql
      data-locations: classpath:data-postgresql.sql
      continue-on-error: true
      separator: ;
      encoding: UTF-8

logging:
  level:
    root: INFO
    com.example.carelink: INFO
    org.postgresql: DEBUG
    com.zaxxer.hikari: DEBUG