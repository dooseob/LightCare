/**
 * 시설 이미지 SEO 모듈 (SEO Module)
 * SEO 최적화, 키워드 관리, Alt 텍스트 생성 전용 모듈
 * 
 * @version 1.0.0
 * @author LightCare Team
 * @requires FacilityImageCore
 */

(function() {
    'use strict';
    
    if (!window.FacilityImageCore) {
        throw new Error('FacilityImageCore 모듈이 필요합니다.');
    }
    
    const Core = window.FacilityImageCore;
    
    if (!window.FacilityImageSystem.SEO) {
        window.FacilityImageSystem.SEO = {};
    }
    
    // ================================================
    // 상수 정의
    // ================================================
    
    const SEO_CONSTANTS = {
        MODULE_NAME: 'FacilityImageSEO',
        VERSION: '1.0.0',
        
        KEYWORDS: {
            FACILITY: ['시설', 'facility', 'care facility'],
            NURSING_HOME: ['요양원', 'nursing home', 'senior care'],
            HOSPITAL: ['병원', 'hospital', 'medical center'],
            INTERIOR: ['내부', 'interior', 'inside'],
            EXTERIOR: ['외관', 'exterior', 'building'],
            ROOM: ['방', 'room', 'resident room'],
            DINING: ['식당', 'dining room', 'meal area'],
            GARDEN: ['정원', 'garden', 'outdoor'],
            CLEAN: ['깨끗한', 'clean', 'hygienic'],
            BRIGHT: ['밝은', 'bright', 'well-lit'],
            MODERN: ['현대적', 'modern', 'contemporary']
        },
        
        MAX_FILENAME_LENGTH: 100,
        MAX_ALT_TEXT_LENGTH: 200,
        KEYWORD_SEPARATOR: '-'
    };
    
    // ================================================
    // SEO 상태 관리
    // ================================================
    
    const seoState = {
        isInitialized: false,
        facilityName: '',
        selectedKeywords: [],
        autoGeneratedNames: new Map(),
        autoGeneratedAlts: new Map()
    };
    
    // ================================================
    // 키워드 관리
    // ================================================
    
    const keywordManager = {
        getKeywordsByCategory() {
            return {
                '시설 종류': SEO_CONSTANTS.KEYWORDS.FACILITY.concat(SEO_CONSTANTS.KEYWORDS.NURSING_HOME),
                '공간': SEO_CONSTANTS.KEYWORDS.INTERIOR.concat(SEO_CONSTANTS.KEYWORDS.ROOM, SEO_CONSTANTS.KEYWORDS.DINING),
                '특징': SEO_CONSTANTS.KEYWORDS.CLEAN.concat(SEO_CONSTANTS.KEYWORDS.BRIGHT, SEO_CONSTANTS.KEYWORDS.MODERN),
                '기타': SEO_CONSTANTS.KEYWORDS.GARDEN.concat(SEO_CONSTANTS.KEYWORDS.EXTERIOR)
            };
        },
        
        getAllKeywords() {
            return Object.values(SEO_CONSTANTS.KEYWORDS).flat();
        },
        
        searchKeywords(query) {
            const allKeywords = this.getAllKeywords();
            return allKeywords.filter(keyword => 
                keyword.toLowerCase().includes(query.toLowerCase())
            );
        },
        
        selectKeyword(keyword) {
            if (!keyword || typeof keyword !== 'string') return;
            
            // 선택된 키워드 목록에 추가
            if (!seoState.selectedKeywords.includes(keyword)) {
                seoState.selectedKeywords.push(keyword);
                Core.logger.log('키워드 선택됨:', keyword);
            }
        },
        
        deselectKeyword(keyword) {
            const index = seoState.selectedKeywords.indexOf(keyword);
            if (index > -1) {
                seoState.selectedKeywords.splice(index, 1);
                Core.logger.log('키워드 선택 해제됨:', keyword);
            }
        },
        
        addCustomKeyword(keyword) {
            if (!seoState.selectedKeywords.includes(keyword)) {
                seoState.selectedKeywords.push(keyword);
                Core.logger.log('커스텀 키워드 추가:', keyword);
            }
        },
        
        removeKeyword(keyword) {
            seoState.selectedKeywords = seoState.selectedKeywords.filter(k => k !== keyword);
            Core.logger.log('키워드 제거:', keyword);
        },
        
        getSelectedKeywords() {
            return [...seoState.selectedKeywords];
        }
    };
    
    // ================================================
    // 파일명 생성
    // ================================================
    
    const fileNameGenerator = {
        generateSEOFileName(originalName, keywords = [], index = 0) {
            // 입력값 검증
            if (!originalName || typeof originalName !== 'string') {
                originalName = 'image.jpg';
            }
            
            const baseName = this.cleanFileName(originalName);
            const keywordString = keywords.slice(0, 3).join(SEO_CONSTANTS.KEYWORD_SEPARATOR);
            const facilityPart = this.convertKoreanToEnglish(seoState.facilityName);
            
            let seoName = '';
            
            if (facilityPart) {
                seoName += facilityPart + SEO_CONSTANTS.KEYWORD_SEPARATOR;
            }
            
            if (keywordString) {
                seoName += keywordString + SEO_CONSTANTS.KEYWORD_SEPARATOR;
            }
            
            if (index > 0) {
                seoName += `${index + 1}${SEO_CONSTANTS.KEYWORD_SEPARATOR}`;
            }
            
            seoName += baseName;
            
            // 길이 제한
            if (seoName.length > SEO_CONSTANTS.MAX_FILENAME_LENGTH) {
                const extension = this.getFileExtension(originalName);
                const maxNameLength = SEO_CONSTANTS.MAX_FILENAME_LENGTH - extension.length;
                seoName = seoName.substring(0, maxNameLength) + extension;
            }
            
            return seoName.toLowerCase();
        },
        
        cleanFileName(fileName) {
            // 입력값 검증
            if (!fileName || typeof fileName !== 'string') {
                return 'image';
            }
            
            // 확장자 분리
            const lastDotIndex = fileName.lastIndexOf('.');
            const nameWithoutExt = lastDotIndex > 0 ? fileName.substring(0, lastDotIndex) : fileName;
            const extension = lastDotIndex > 0 ? fileName.substring(lastDotIndex) : '';
            
            // 한글 및 특수문자 제거
            const cleanName = nameWithoutExt
                .replace(/[가-힣]/g, '') // 한글 제거
                .replace(/[^a-zA-Z0-9-_]/g, '') // 영문, 숫자, 하이픈, 언더스코어만 유지
                .replace(/[-_]+/g, '-') // 연속된 구분자를 하나로 통합
                .replace(/^[-_]+|[-_]+$/g, ''); // 시작과 끝의 구분자 제거
            
            return cleanName || 'image';
        },
        
        getFileExtension(fileName) {
            const lastDotIndex = fileName.lastIndexOf('.');
            return lastDotIndex > 0 ? fileName.substring(lastDotIndex) : '.jpg';
        },
        
        convertKoreanToEnglish(korean) {
            const koreanToEnglish = {
                '요양원': 'nursing-home',
                '병원': 'hospital',
                '시설': 'facility',
                '케어': 'care',
                '센터': 'center',
                '의료': 'medical',
                '복지': 'welfare',
                '실버': 'silver',
                '타운': 'town'
            };
            
            let result = korean.toLowerCase();
            
            Object.entries(koreanToEnglish).forEach(([ko, en]) => {
                result = result.replace(new RegExp(ko, 'g'), en);
            });
            
            // 남은 한글 제거
            result = result.replace(/[가-힣]/g, '');
            
            return result.replace(/[^a-zA-Z0-9-]/g, '').replace(/-+/g, '-').replace(/^-+|-+$/g, '');
        }
    };
    
    // ================================================
    // Alt 텍스트 생성
    // ================================================
    
    const altTextGenerator = {
        generateAltText(fileName, keywords = [], index = 0) {
            let altText = '';
            
            // 시설명 추가
            if (seoState.facilityName) {
                altText += seoState.facilityName;
            }
            
            // 키워드 추가
            if (keywords.length > 0) {
                const koreanKeywords = keywords.filter(k => /[가-힣]/.test(k));
                if (koreanKeywords.length > 0) {
                    altText += ' ' + koreanKeywords.slice(0, 2).join(' ');
                }
            }
            
            // 파일명에서 추출한 정보 추가
            const fileInfo = this.extractInfoFromFileName(fileName);
            if (fileInfo) {
                altText += ' ' + fileInfo;
            }
            
            // 기본 설명 추가
            altText += ' 사진';
            
            // 인덱스 추가
            if (index > 0) {
                altText += ` ${index + 1}`;
            }
            
            // 길이 제한
            if (altText.length > SEO_CONSTANTS.MAX_ALT_TEXT_LENGTH) {
                altText = altText.substring(0, SEO_CONSTANTS.MAX_ALT_TEXT_LENGTH - 3) + '...';
            }
            
            return altText.trim();
        },
        
        extractInfoFromFileName(fileName) {
            const nameWithoutExt = fileName.replace(/\.[^/.]+$/, '');
            const parts = nameWithoutExt.split(/[-_]/);
            
            const meaningfulParts = parts.filter(part => 
                part.length > 2 && 
                !part.match(/^\d+$/) && // 숫자만 있는 부분 제외
                !part.match(/^(img|image|photo|pic)$/i) // 일반적인 이미지 용어 제외
            );
            
            return meaningfulParts.slice(0, 2).join(' ');
        },
        
        optimizeAltText(altText) {
            // 중복 단어 제거
            const words = altText.split(' ');
            const uniqueWords = [...new Set(words)];
            
            // 불필요한 단어 제거
            const stopWords = ['의', '을', '를', '이', '가', '에서', '에게', '로', '으로'];
            const filteredWords = uniqueWords.filter(word => !stopWords.includes(word));
            
            return filteredWords.join(' ').trim();
        }
    };
    
    // ================================================
    // SEO 분석
    // ================================================
    
    const seoAnalyzer = {
        analyzeFileName(fileName) {
            const score = {
                total: 0,
                details: [],
                recommendations: []
            };
            
            // 파일명 길이 체크
            if (fileName.length <= SEO_CONSTANTS.MAX_FILENAME_LENGTH) {
                score.total += 20;
                score.details.push('적절한 파일명 길이');
            } else {
                score.recommendations.push('파일명이 너무 깁니다.');
            }
            
            // 한글 사용 체크
            if (!/[가-힣]/.test(fileName)) {
                score.total += 30;
                score.details.push('영문 파일명 사용');
            } else {
                score.recommendations.push('한글 대신 영문 파일명을 사용하세요.');
            }
            
            // 키워드 포함 체크
            const hasKeywords = keywordManager.getAllKeywords().some(keyword => 
                fileName.toLowerCase().includes(keyword.toLowerCase())
            );
            
            if (hasKeywords) {
                score.total += 30;
                score.details.push('관련 키워드 포함');
            } else {
                score.recommendations.push('관련 키워드를 포함하세요.');
            }
            
            // 구분자 사용 체크
            if (fileName.includes('-') || fileName.includes('_')) {
                score.total += 20;
                score.details.push('적절한 구분자 사용');
            } else {
                score.recommendations.push('단어 구분을 위해 하이픈(-)을 사용하세요.');
            }
            
            return score;
        },
        
        analyzeAltText(altText) {
            const score = {
                total: 0,
                details: [],
                recommendations: []
            };
            
            // Alt 텍스트 길이 체크
            if (altText.length >= 10 && altText.length <= SEO_CONSTANTS.MAX_ALT_TEXT_LENGTH) {
                score.total += 30;
                score.details.push('적절한 Alt 텍스트 길이');
            } else if (altText.length < 10) {
                score.recommendations.push('Alt 텍스트가 너무 짧습니다.');
            } else {
                score.recommendations.push('Alt 텍스트가 너무 깁니다.');
            }
            
            // 시설명 포함 체크
            if (seoState.facilityName && altText.includes(seoState.facilityName)) {
                score.total += 25;
                score.details.push('시설명 포함');
            } else {
                score.recommendations.push('시설명을 포함하세요.');
            }
            
            // 키워드 포함 체크
            const hasKeywords = keywordManager.getAllKeywords().some(keyword => 
                altText.toLowerCase().includes(keyword.toLowerCase())
            );
            
            if (hasKeywords) {
                score.total += 25;
                score.details.push('관련 키워드 포함');
            } else {
                score.recommendations.push('관련 키워드를 포함하세요.');
            }
            
            // 자연스러운 문장 체크
            if (altText.includes(' ') && !altText.includes('___') && !altText.includes('---')) {
                score.total += 20;
                score.details.push('자연스러운 문장 구성');
            } else {
                score.recommendations.push('자연스러운 문장으로 작성하세요.');
            }
            
            return score;
        }
    };
    
    // ================================================
    // 메인 SEO 객체
    // ================================================
    
    const seo = {
        initialize(facilityName = '', options = {}) {
            if (seoState.isInitialized) {
                Core.logger.warn('SEO 모듈이 이미 초기화됨');
                return true;
            }
            
            Core.logger.log('SEO 모듈 초기화 시작');
            
            try {
                seoState.facilityName = facilityName;
                seoState.selectedKeywords = [];
                
                seoState.isInitialized = true;
                Core.logger.success('SEO 모듈 초기화 완료');
                
                return true;
            } catch (error) {
                Core.logger.error('SEO 모듈 초기화 실패:', error);
                return false;
            }
        },
        
        generateFileName(originalName, keywords = [], index = 0) {
            const fileName = fileNameGenerator.generateSEOFileName(originalName, keywords, index);
            seoState.autoGeneratedNames.set(originalName, fileName);
            return fileName;
        },
        
        generateAltText(fileName, keywords = [], index = 0) {
            const altText = altTextGenerator.generateAltText(fileName, keywords, index);
            const optimizedAltText = altTextGenerator.optimizeAltText(altText);
            seoState.autoGeneratedAlts.set(fileName, optimizedAltText);
            return optimizedAltText;
        },
        
        addKeyword(keyword) {
            keywordManager.addCustomKeyword(keyword);
        },
        
        removeKeyword(keyword) {
            keywordManager.removeKeyword(keyword);
        },
        
        getKeywords() {
            return keywordManager.getSelectedKeywords();
        },
        
        searchKeywords(query) {
            return keywordManager.searchKeywords(query);
        },
        
        analyzeFileName(fileName) {
            return seoAnalyzer.analyzeFileName(fileName);
        },
        
        analyzeAltText(altText) {
            return seoAnalyzer.analyzeAltText(altText);
        },
        
        getOptimizationSuggestions(fileName, altText) {
            const fileAnalysis = this.analyzeFileName(fileName);
            const altAnalysis = this.analyzeAltText(altText);
            
            return {
                fileName: fileAnalysis,
                altText: altAnalysis,
                overallScore: Math.round((fileAnalysis.total + altAnalysis.total) / 2)
            };
        },
        
        bulkOptimize(files) {
            return files.map((file, index) => {
                const optimizedFileName = this.generateFileName(file.name, seoState.selectedKeywords, index);
                const optimizedAltText = this.generateAltText(optimizedFileName, seoState.selectedKeywords, index);
                
                return {
                    ...file,
                    seoFileName: optimizedFileName,
                    altText: optimizedAltText,
                    seoScore: this.getOptimizationSuggestions(optimizedFileName, optimizedAltText)
                };
            });
        },
        
        destroy() {
            seoState.isInitialized = false;
            seoState.facilityName = '';
            seoState.selectedKeywords = [];
            seoState.autoGeneratedNames.clear();
            seoState.autoGeneratedAlts.clear();
            
            Core.logger.log('SEO 모듈 제거 완료');
        },
        
        getInfo() {
            return {
                name: SEO_CONSTANTS.MODULE_NAME,
                version: SEO_CONSTANTS.VERSION,
                isInitialized: seoState.isInitialized,
                facilityName: seoState.facilityName,
                selectedKeywordsCount: seoState.selectedKeywords.length,
                generatedNamesCount: seoState.autoGeneratedNames.size
            };
        }
    };
    
    // ================================================
    // 모듈 노출
    // ================================================
    
    window.FacilityImageSystem.SEO = {
        CONSTANTS: SEO_CONSTANTS,
        seo,
        keywordManager,
        fileNameGenerator,
        altTextGenerator,
        seoAnalyzer,
        getState: () => ({ ...seoState }),
        initialize: seo.initialize.bind(seo),
        generateFileName: seo.generateFileName.bind(seo),
        generateAltText: seo.generateAltText.bind(seo),
        addKeyword: seo.addKeyword.bind(seo),
        removeKeyword: seo.removeKeyword.bind(seo),
        getKeywords: seo.getKeywords.bind(seo),
        analyzeFileName: seo.analyzeFileName.bind(seo),
        analyzeAltText: seo.analyzeAltText.bind(seo),
        bulkOptimize: seo.bulkOptimize.bind(seo),
        destroy: seo.destroy.bind(seo),
        cleanFileName: fileNameGenerator.cleanFileName.bind(fileNameGenerator),
        selectKeyword: keywordManager.selectKeyword.bind(keywordManager),
        deselectKeyword: keywordManager.deselectKeyword.bind(keywordManager)
    };
    
    window.FacilityImageSEO = window.FacilityImageSystem.SEO;
    
    Core.logger.log('SEO 모듈 로드 완료');
    
})(); 