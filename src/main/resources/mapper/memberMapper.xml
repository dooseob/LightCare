<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.carelink.dao.MemberMapper">

    <!-- 회원 정보 결과 매핑 -->
    <resultMap id="memberResultMap" type="MemberDTO">
        <id property="memberId" column="member_id"/>
        <result property="userId" column="user_id"/>
        <result property="password" column="password"/>
        <result property="name" column="name"/>
        <result property="email" column="email"/>
        <result property="phone" column="phone"/>
        <result property="role" column="role"/>
        <result property="address" column="address"/>
        <result property="profileImage" column="profile_image"/>
        <result property="isActive" column="is_active"/>
        <result property="loginFailCount" column="login_fail_count"/>
        <result property="lastLoginAt" column="last_login_at"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="isDeleted" column="is_deleted"/>
    </resultMap>

    <!-- 사용자 ID로 회원 정보 조회 -->
    <select id="findByUserId" resultMap="memberResultMap">
        SELECT *
        FROM member
        WHERE user_id = #{userId}
          AND is_deleted = false
    </select>

    <!-- 회원 ID로 회원 정보 조회 -->
    <select id="findById" resultMap="memberResultMap">
        SELECT *
        FROM member
        WHERE member_id = #{memberId}
          AND is_deleted = false
    </select>

    <!-- 이메일로 회원 정보 조회 -->
    <select id="findByEmail" resultMap="memberResultMap">
        SELECT *
        FROM member
        WHERE email = #{email}
          AND is_deleted = false
    </select>

    <!-- 회원 정보 저장 -->
    <insert id="insertMember" parameterType="MemberDTO" useGeneratedKeys="true" keyProperty="memberId">
        INSERT INTO member (
            user_id,
            password,
            name,
            email,
            phone,
            role,
            address,
            profile_image,
            is_active,
            login_fail_count,
            created_at,
            updated_at,
            is_deleted
        ) VALUES (
            #{userId},
            #{password},
            #{name},
            #{email},
            #{phone},
            #{role},
            #{address},
            #{profileImage},
            #{isActive},
            #{loginFailCount},
            NOW(),
            NOW(),
            false
        )
    </insert>

    <!-- 회원 정보 수정 -->
    <update id="updateMember" parameterType="MemberDTO">
        UPDATE member
        SET name = #{name},
            email = #{email},
            phone = #{phone},
            address = #{address},
            profile_image = #{profileImage},
            updated_at = NOW()
        WHERE member_id = #{memberId}
          AND is_deleted = false
    </update>

    <!-- 회원 탈퇴 (논리 삭제) -->
    <update id="deleteMember">
        UPDATE member
        SET is_deleted = true,
            updated_at = NOW()
        WHERE member_id = #{memberId}
    </update>

    <!-- 로그인 성공 시 정보 업데이트 -->
    <update id="updateLoginSuccess">
        UPDATE member
        SET login_fail_count = 0,
            last_login_at = NOW(),
            updated_at = NOW()
        WHERE member_id = #{memberId}
    </update>

    <!-- 로그인 실패 시 실패 횟수 증가 -->
    <update id="updateLoginFail">
        UPDATE member
        SET login_fail_count = login_fail_count + 1,
            updated_at = NOW()
        WHERE member_id = #{memberId}
    </update>

    <!-- 전체 회원 수 조회 -->
    <select id="getTotalCount" resultType="int">
        SELECT COUNT(*)
        FROM member
        WHERE is_deleted = false
    </select>

    <!-- 페이징된 회원 목록 조회 -->
    <select id="findMembersWithPaging" parameterType="MemberDTO" resultMap="memberResultMap">
        SELECT *
        FROM member
        WHERE is_deleted = false
        <if test="searchKeyword != null and searchKeyword != ''">
            AND (user_id LIKE CONCAT('%', #{searchKeyword}, '%')
                 OR name LIKE CONCAT('%', #{searchKeyword}, '%')
                 OR email LIKE CONCAT('%', #{searchKeyword}, '%'))
        </if>
        <if test="role != null and role != ''">
            AND role = #{role}
        </if>
        ORDER BY created_at DESC
        LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <!-- 특정 역할의 회원 목록 조회 -->
    <select id="findMembersByRole" resultMap="memberResultMap">
        SELECT *
        FROM member
        WHERE role = #{role}
          AND is_deleted = false
        ORDER BY created_at DESC
    </select>

    <!-- 회원 상태 변경 -->
    <update id="updateMemberStatus">
        UPDATE member
        SET is_active = #{isActive},
            updated_at = NOW()
        WHERE member_id = #{memberId}
    </update>

</mapper> 