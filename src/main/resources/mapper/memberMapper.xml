<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.carelink.dao.MemberMapper">

    <resultMap id="memberResultMap" type="MemberDTO">
        <id property="memberId" column="member_id"/>
        <result property="userId" column="user_id"/>
        <result property="password" column="password"/>
        <result property="name" column="name"/>
        <result property="email" column="email"/>
        <result property="phone" column="phone"/>
        <result property="role" column="role"/>
        <result property="address" column="address"/> <result property="profileImage" column="profile_image"/> <result property="isActive" column="is_active"/>
        <result property="loginFailCount" column="login_fail_count"/>
        <result property="lastLoginAt" column="last_login_at"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="isDeleted" column="is_deleted"/>
    </resultMap>

    <select id="findByUserId" resultMap="memberResultMap">
        SELECT *
        FROM member
        WHERE user_id = #{userId}
          AND is_deleted = false
    </select>

    <select id="findById" resultMap="memberResultMap">
        SELECT *
        FROM member
        WHERE member_id = #{memberId}
          AND is_deleted = false
    </select>

    <select id="findByEmail" resultMap="memberResultMap">
        SELECT *
        FROM member
        WHERE email = #{email}
          AND is_deleted = false
    </select>

    <insert id="insertMember" parameterType="MemberDTO" useGeneratedKeys="true" keyProperty="memberId">
        INSERT INTO member (
            user_id,
            password,
            name,
            email,
            phone,
            role,
            address,          profile_image,    is_active,
            login_fail_count,
            created_at,
            updated_at,
            is_deleted
        ) VALUES (
                     #{userId},
                     #{password},
                     #{name},
                     #{email},
                     #{phone},
                     #{role},
                     #{address},        #{profileImage},   TRUE,  0,     NOW(), NOW(), FALSE  )
    </insert>

    <update id="updateMember" parameterType="MemberDTO">
        UPDATE member
        SET
            name = #{name},
            email = #{email},
            phone = #{phone},
            address = #{address},        profile_image = #{profileImage}, updated_at = NOW()
        WHERE member_id = #{memberId}
    </update>

    <update id="softDeleteMember">
        UPDATE member
        SET
            is_deleted = TRUE,
            is_active = FALSE,
            updated_at = NOW()
        WHERE user_id = #{userId}
    </update>

    <update id="updatePassword" parameterType="MemberDTO">
        UPDATE member
        SET
            password = #{password},
            updated_at = NOW()
        WHERE member_id = #{memberId}
    </update>

    <update id="updateLoginSuccess">
        UPDATE member
        SET login_fail_count = 0,
            last_login_at = NOW(),
            updated_at = NOW()
        WHERE member_id = #{memberId}
    </update>

    <update id="updateLoginFail">
        UPDATE member
        SET login_fail_count = login_fail_count + 1,
            updated_at = NOW()
        WHERE member_id = #{memberId}
    </update>

    <select id="getTotalCount" resultType="int">
        SELECT COUNT(*)
        FROM member
        WHERE is_deleted = FALSE
    </select>

    <select id="findMembersWithPaging" resultMap="memberResultMap">
        SELECT *
        FROM member
        WHERE is_deleted = FALSE
        <if test="role != null and !role.isEmpty()">
            AND role = #{role}
        </if>
        ORDER BY created_at DESC
        LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <select id="findMembersByRole" resultMap="memberResultMap">
        SELECT *
        FROM member
        WHERE role = #{role}
          AND is_deleted = FALSE
    </select>

    <update id="updateMemberStatus">
        UPDATE member
        SET is_active = #{isActive},
            updated_at = NOW()
        WHERE member_id = #{memberId}
    </update>

</mapper>